// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/audit/v1beta/audit.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/ovrclk/akash/types"
	github_com_ovrclk_akash_x_provider_types "github.com/ovrclk/akash/x/provider/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AuditedAttributes_State int32

const (
	// Prefix should start with 0 in enum. So declaring dummy state
	AuditedAttributesStateInvalid AuditedAttributes_State = 0
	// AttributesSigned denotes state for attributes active
	AuditedAttributesSigned AuditedAttributes_State = 1
)

var AuditedAttributes_State_name = map[int32]string{
	0: "invalid",
	1: "signed",
}

var AuditedAttributes_State_value = map[string]int32{
	"invalid": 0,
	"signed":  1,
}

func (x AuditedAttributes_State) String() string {
	return proto.EnumName(AuditedAttributes_State_name, int32(x))
}

func (AuditedAttributes_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_55be88d3074fb281, []int{1, 0}
}

type Provider struct {
	Owner      string                                              `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner" yaml:"owner"`
	Validator  string                                              `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator" yaml:"validator"`
	Attributes github_com_ovrclk_akash_x_provider_types.Attributes `protobuf:"bytes,4,rep,name=attributes,proto3,castrepeated=github.com/ovrclk/akash/x/provider/types.Attributes" json:"attributes" yaml:"attributes"`
}

func (m *Provider) Reset()         { *m = Provider{} }
func (m *Provider) String() string { return proto.CompactTextString(m) }
func (*Provider) ProtoMessage()    {}
func (*Provider) Descriptor() ([]byte, []int) {
	return fileDescriptor_55be88d3074fb281, []int{0}
}
func (m *Provider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Provider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Provider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Provider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Provider.Merge(m, src)
}
func (m *Provider) XXX_Size() int {
	return m.Size()
}
func (m *Provider) XXX_DiscardUnknown() {
	xxx_messageInfo_Provider.DiscardUnknown(m)
}

var xxx_messageInfo_Provider proto.InternalMessageInfo

func (m *Provider) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Provider) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *Provider) GetAttributes() github_com_ovrclk_akash_x_provider_types.Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// Attributes
type AuditedAttributes struct {
	State      AuditedAttributes_State                             `protobuf:"varint,1,opt,name=state,proto3,enum=akash.audit.v1beta1.AuditedAttributes_State" json:"state" yaml:"state"`
	Owner      string                                              `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner" yaml:"owner"`
	Validator  string                                              `protobuf:"bytes,3,opt,name=validator,proto3" json:"validator" yaml:"validator"`
	Attributes github_com_ovrclk_akash_x_provider_types.Attributes `protobuf:"bytes,4,rep,name=attributes,proto3,castrepeated=github.com/ovrclk/akash/x/provider/types.Attributes" json:"attributes" yaml:"attributes"`
}

func (m *AuditedAttributes) Reset()         { *m = AuditedAttributes{} }
func (m *AuditedAttributes) String() string { return proto.CompactTextString(m) }
func (*AuditedAttributes) ProtoMessage()    {}
func (*AuditedAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_55be88d3074fb281, []int{1}
}
func (m *AuditedAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuditedAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuditedAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuditedAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuditedAttributes.Merge(m, src)
}
func (m *AuditedAttributes) XXX_Size() int {
	return m.Size()
}
func (m *AuditedAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_AuditedAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_AuditedAttributes proto.InternalMessageInfo

func (m *AuditedAttributes) GetState() AuditedAttributes_State {
	if m != nil {
		return m.State
	}
	return AuditedAttributesStateInvalid
}

func (m *AuditedAttributes) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *AuditedAttributes) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *AuditedAttributes) GetAttributes() github_com_ovrclk_akash_x_provider_types.Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// AttributesResponse represents details of deployment along with group details
type AttributesResponse struct {
	Attributes []AuditedAttributes `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes" yaml:"attributes"`
}

func (m *AttributesResponse) Reset()         { *m = AttributesResponse{} }
func (m *AttributesResponse) String() string { return proto.CompactTextString(m) }
func (*AttributesResponse) ProtoMessage()    {}
func (*AttributesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55be88d3074fb281, []int{2}
}
func (m *AttributesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttributesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttributesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttributesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttributesResponse.Merge(m, src)
}
func (m *AttributesResponse) XXX_Size() int {
	return m.Size()
}
func (m *AttributesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AttributesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AttributesResponse proto.InternalMessageInfo

func (m *AttributesResponse) GetAttributes() []AuditedAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// AttributesFilters defines filters used to filter deployments
type AttributesFilters struct {
	Validators []string `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators" yaml:"validators"`
	Owners     []string `protobuf:"bytes,2,rep,name=owners,proto3" json:"owners" yaml:"owners"`
}

func (m *AttributesFilters) Reset()         { *m = AttributesFilters{} }
func (m *AttributesFilters) String() string { return proto.CompactTextString(m) }
func (*AttributesFilters) ProtoMessage()    {}
func (*AttributesFilters) Descriptor() ([]byte, []int) {
	return fileDescriptor_55be88d3074fb281, []int{3}
}
func (m *AttributesFilters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttributesFilters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttributesFilters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttributesFilters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttributesFilters.Merge(m, src)
}
func (m *AttributesFilters) XXX_Size() int {
	return m.Size()
}
func (m *AttributesFilters) XXX_DiscardUnknown() {
	xxx_messageInfo_AttributesFilters.DiscardUnknown(m)
}

var xxx_messageInfo_AttributesFilters proto.InternalMessageInfo

func (m *AttributesFilters) GetValidators() []string {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *AttributesFilters) GetOwners() []string {
	if m != nil {
		return m.Owners
	}
	return nil
}

type MsgSignProviderAttributes struct {
	Owner      string                                              `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner" yaml:"owner"`
	Validator  string                                              `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator" yaml:"auditor"`
	Attributes github_com_ovrclk_akash_x_provider_types.Attributes `protobuf:"bytes,3,rep,name=attributes,proto3,castrepeated=github.com/ovrclk/akash/x/provider/types.Attributes" json:"attributes" yaml:"attributes"`
}

func (m *MsgSignProviderAttributes) Reset()         { *m = MsgSignProviderAttributes{} }
func (m *MsgSignProviderAttributes) String() string { return proto.CompactTextString(m) }
func (*MsgSignProviderAttributes) ProtoMessage()    {}
func (*MsgSignProviderAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_55be88d3074fb281, []int{4}
}
func (m *MsgSignProviderAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignProviderAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignProviderAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignProviderAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignProviderAttributes.Merge(m, src)
}
func (m *MsgSignProviderAttributes) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignProviderAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignProviderAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignProviderAttributes proto.InternalMessageInfo

func (m *MsgSignProviderAttributes) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgSignProviderAttributes) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *MsgSignProviderAttributes) GetAttributes() github_com_ovrclk_akash_x_provider_types.Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type MsgDeleteProviderAttributes struct {
	Owner      string                                              `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner" yaml:"owner"`
	Validator  string                                              `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator" yaml:"auditor"`
	Attributes github_com_ovrclk_akash_x_provider_types.Attributes `protobuf:"bytes,3,rep,name=attributes,proto3,castrepeated=github.com/ovrclk/akash/x/provider/types.Attributes" json:"attributes" yaml:"attributes"`
}

func (m *MsgDeleteProviderAttributes) Reset()         { *m = MsgDeleteProviderAttributes{} }
func (m *MsgDeleteProviderAttributes) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteProviderAttributes) ProtoMessage()    {}
func (*MsgDeleteProviderAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_55be88d3074fb281, []int{5}
}
func (m *MsgDeleteProviderAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteProviderAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteProviderAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteProviderAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteProviderAttributes.Merge(m, src)
}
func (m *MsgDeleteProviderAttributes) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteProviderAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteProviderAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteProviderAttributes proto.InternalMessageInfo

func (m *MsgDeleteProviderAttributes) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgDeleteProviderAttributes) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *MsgDeleteProviderAttributes) GetAttributes() github_com_ovrclk_akash_x_provider_types.Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func init() {
	proto.RegisterEnum("akash.audit.v1beta1.AuditedAttributes_State", AuditedAttributes_State_name, AuditedAttributes_State_value)
	proto.RegisterType((*Provider)(nil), "akash.audit.v1beta1.Provider")
	proto.RegisterType((*AuditedAttributes)(nil), "akash.audit.v1beta1.AuditedAttributes")
	proto.RegisterType((*AttributesResponse)(nil), "akash.audit.v1beta1.AttributesResponse")
	proto.RegisterType((*AttributesFilters)(nil), "akash.audit.v1beta1.AttributesFilters")
	proto.RegisterType((*MsgSignProviderAttributes)(nil), "akash.audit.v1beta1.MsgSignProviderAttributes")
	proto.RegisterType((*MsgDeleteProviderAttributes)(nil), "akash.audit.v1beta1.MsgDeleteProviderAttributes")
}

func init() { proto.RegisterFile("akash/audit/v1beta/audit.proto", fileDescriptor_55be88d3074fb281) }

var fileDescriptor_55be88d3074fb281 = []byte{
	// 596 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x95, 0xcf, 0x6b, 0x13, 0x41,
	0x14, 0xc7, 0x77, 0x36, 0x4d, 0x6c, 0x46, 0x2d, 0xc9, 0x28, 0x98, 0x26, 0x74, 0x27, 0x1d, 0xd1,
	0xf6, 0x20, 0xbb, 0xa4, 0xb9, 0x05, 0xa4, 0x34, 0x8a, 0xe0, 0xa1, 0x20, 0xeb, 0x4d, 0x50, 0xd8,
	0x34, 0xe3, 0x76, 0x69, 0x9a, 0x09, 0x3b, 0x93, 0x68, 0xff, 0x03, 0xe9, 0x45, 0x6f, 0x7a, 0x30,
	0x50, 0xf0, 0xe6, 0x4d, 0xfc, 0x27, 0x7a, 0xec, 0xd1, 0xd3, 0x2a, 0xc9, 0x45, 0x72, 0xcc, 0xc1,
	0xb3, 0xec, 0x4c, 0x92, 0x59, 0x8d, 0x4a, 0xf4, 0x24, 0xe2, 0x2d, 0xf3, 0x7d, 0x3f, 0xe6, 0xbd,
	0xcf, 0x7b, 0x99, 0x85, 0x96, 0x77, 0xe0, 0xf1, 0x7d, 0xc7, 0xeb, 0x36, 0x03, 0xe1, 0xf4, 0x2a,
	0x0d, 0x2a, 0x3c, 0x75, 0xb0, 0x3b, 0x21, 0x13, 0x0c, 0x5d, 0x92, 0x76, 0x5b, 0x49, 0xca, 0x5e,
	0x29, 0x5e, 0xf6, 0x99, 0xcf, 0xa4, 0xdd, 0x89, 0x7f, 0x29, 0xd7, 0x22, 0x51, 0xa9, 0x1a, 0x1e,
	0xa7, 0x93, 0x4c, 0x15, 0xc7, 0x13, 0x22, 0x0c, 0x1a, 0x5d, 0x41, 0x95, 0x0f, 0x79, 0x6d, 0xc2,
	0xe5, 0x7b, 0x21, 0xeb, 0x05, 0x4d, 0x1a, 0x22, 0x07, 0xa6, 0xd9, 0x93, 0x36, 0x0d, 0x0b, 0xa0,
	0x0c, 0x36, 0xb3, 0xf5, 0xd5, 0x51, 0x84, 0x95, 0x30, 0x8e, 0xf0, 0x85, 0x23, 0xef, 0xb0, 0x55,
	0x23, 0xf2, 0x48, 0x5c, 0x25, 0xa3, 0x6d, 0x98, 0xed, 0x79, 0xad, 0xa0, 0xe9, 0x09, 0x16, 0x16,
	0x4c, 0x19, 0xb4, 0x3e, 0x8a, 0xb0, 0x16, 0xc7, 0x11, 0xce, 0xa9, 0xc0, 0x99, 0x44, 0x5c, 0x6d,
	0x46, 0x7d, 0x00, 0xe1, 0xac, 0x24, 0x5e, 0x58, 0x2a, 0xa7, 0x36, 0xcf, 0x6f, 0xad, 0xd9, 0xaa,
	0xc7, 0xb8, 0xf0, 0x69, 0x8b, 0xf6, 0xce, 0xd4, 0xab, 0xfe, 0xe8, 0x34, 0xc2, 0xc6, 0x28, 0xc2,
	0x89, 0xc0, 0x71, 0x84, 0xf3, 0xea, 0x1a, 0xad, 0x91, 0xb7, 0x1f, 0x71, 0xd5, 0x0f, 0xc4, 0x7e,
	0xb7, 0x61, 0xef, 0xb1, 0x43, 0x87, 0xf5, 0xc2, 0xbd, 0xd6, 0x81, 0xa3, 0x98, 0x3c, 0x75, 0x3a,
	0x93, 0xa6, 0x1d, 0x71, 0xd4, 0xa1, 0x5c, 0xa7, 0xe7, 0x6e, 0x22, 0x2f, 0xf9, 0x92, 0x82, 0xf9,
	0x9d, 0x18, 0x35, 0x6d, 0x6a, 0x0f, 0xf4, 0x10, 0xa6, 0xb9, 0xf0, 0x04, 0x95, 0x9c, 0x56, 0xb6,
	0x6e, 0xd8, 0x3f, 0x98, 0x89, 0x3d, 0x17, 0x66, 0xdf, 0x8f, 0x63, 0x14, 0x55, 0x19, 0xae, 0xa9,
	0xca, 0x23, 0x71, 0x95, 0xac, 0xc7, 0x60, 0xfe, 0xc9, 0x18, 0x52, 0xff, 0xe0, 0x18, 0x1e, 0xc3,
	0xb4, 0x84, 0x87, 0x6c, 0x78, 0x2e, 0x68, 0xcb, 0xba, 0x73, 0x46, 0x71, 0xfd, 0xb8, 0x5f, 0x5e,
	0x9b, 0xc3, 0x2c, 0x1d, 0xef, 0x2a, 0x27, 0xb4, 0x01, 0x33, 0x3c, 0xf0, 0xdb, 0xb4, 0x99, 0x03,
	0xc5, 0xd2, 0x71, 0xbf, 0x7c, 0x65, 0xde, 0x5d, 0x9a, 0x8b, 0x4b, 0xcf, 0xde, 0x58, 0x46, 0x6d,
	0xf9, 0xd5, 0x09, 0x06, 0x9f, 0x4f, 0xb0, 0x41, 0x9e, 0x03, 0x88, 0x12, 0xc5, 0x50, 0xde, 0x61,
	0x6d, 0x4e, 0x11, 0xfb, 0x86, 0x13, 0x90, 0x9c, 0xae, 0x2f, 0x36, 0xfe, 0xfa, 0xc6, 0x82, 0xc0,
	0x92, 0x9d, 0x27, 0x2a, 0x7a, 0x09, 0x60, 0x5e, 0x67, 0xbb, 0x13, 0xb4, 0x04, 0x0d, 0x39, 0xba,
	0x05, 0xe1, 0x6c, 0x8c, 0xaa, 0xa0, 0x6c, 0xfd, 0x6a, 0x7c, 0x89, 0x56, 0xf5, 0x25, 0x5a, 0x23,
	0x6e, 0xc2, 0x01, 0x55, 0x61, 0x46, 0x2e, 0x12, 0x2f, 0x98, 0x32, 0x41, 0x69, 0x14, 0xe1, 0x89,
	0x32, 0x8e, 0xf0, 0xc5, 0xc4, 0xca, 0x71, 0xe2, 0x4e, 0x0c, 0x89, 0xca, 0xde, 0x99, 0x70, 0x75,
	0x97, 0xfb, 0x31, 0xc9, 0xe9, 0x53, 0x92, 0xf8, 0xb3, 0xfc, 0xf6, 0xa3, 0x72, 0x73, 0xfe, 0x51,
	0xc1, 0xdf, 0x6f, 0xf3, 0xca, 0x84, 0x5a, 0x0c, 0xf9, 0xd7, 0xbb, 0x9c, 0xfa, 0xcb, 0x76, 0xb9,
	0xb6, 0x24, 0x99, 0xbd, 0x37, 0x61, 0x69, 0x97, 0xfb, 0xb7, 0x69, 0x8b, 0x0a, 0xfa, 0x9f, 0xda,
	0x62, 0xd4, 0xea, 0xdb, 0xa7, 0x03, 0x0b, 0x9c, 0x0d, 0x2c, 0xf0, 0x69, 0x60, 0x81, 0x17, 0x43,
	0xcb, 0x38, 0x1b, 0x5a, 0xc6, 0x87, 0xa1, 0x65, 0x3c, 0xb8, 0xf6, 0xf3, 0x0b, 0xd4, 0xa7, 0x54,
	0x66, 0x6f, 0x64, 0xe4, 0x57, 0xaf, 0xfa, 0x35, 0x00, 0x00, 0xff, 0xff, 0x2d, 0x83, 0x4d, 0xf8,
	0x66, 0x07, 0x00, 0x00,
}

func (m *Provider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Provider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Provider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAudit(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuditedAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuditedAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuditedAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAudit(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.State != 0 {
		i = encodeVarintAudit(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AttributesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttributesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttributesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAudit(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AttributesFilters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttributesFilters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttributesFilters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owners) > 0 {
		for iNdEx := len(m.Owners) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Owners[iNdEx])
			copy(dAtA[i:], m.Owners[iNdEx])
			i = encodeVarintAudit(dAtA, i, uint64(len(m.Owners[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Validators[iNdEx])
			copy(dAtA[i:], m.Validators[iNdEx])
			i = encodeVarintAudit(dAtA, i, uint64(len(m.Validators[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgSignProviderAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignProviderAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignProviderAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAudit(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteProviderAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteProviderAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteProviderAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAudit(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAudit(dAtA []byte, offset int, v uint64) int {
	offset -= sovAudit(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Provider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovAudit(uint64(l))
		}
	}
	return n
}

func (m *AuditedAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovAudit(uint64(m.State))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovAudit(uint64(l))
		}
	}
	return n
}

func (m *AttributesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovAudit(uint64(l))
		}
	}
	return n
}

func (m *AttributesFilters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for _, s := range m.Validators {
			l = len(s)
			n += 1 + l + sovAudit(uint64(l))
		}
	}
	if len(m.Owners) > 0 {
		for _, s := range m.Owners {
			l = len(s)
			n += 1 + l + sovAudit(uint64(l))
		}
	}
	return n
}

func (m *MsgSignProviderAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovAudit(uint64(l))
		}
	}
	return n
}

func (m *MsgDeleteProviderAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovAudit(uint64(l))
		}
	}
	return n
}

func sovAudit(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAudit(x uint64) (n int) {
	return sovAudit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Provider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAudit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Provider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Provider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, types.Attribute{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAudit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAudit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAudit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuditedAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAudit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuditedAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuditedAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= AuditedAttributes_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, types.Attribute{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAudit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAudit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAudit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttributesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAudit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttributesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttributesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, AuditedAttributes{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAudit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAudit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAudit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttributesFilters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAudit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttributesFilters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttributesFilters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owners", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owners = append(m.Owners, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAudit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAudit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAudit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignProviderAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAudit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignProviderAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignProviderAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, types.Attribute{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAudit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAudit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAudit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteProviderAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAudit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteProviderAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteProviderAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, types.Attribute{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAudit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAudit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAudit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAudit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAudit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAudit
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAudit
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAudit
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAudit        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAudit          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAudit = fmt.Errorf("proto: unexpected end of group")
)
